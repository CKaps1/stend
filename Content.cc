/**
 *
 *  Content.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Content.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::stend;

const std::string Content::Cols::_contentid = "contentid";
const std::string Content::Cols::_filename = "filename";
const std::string Content::Cols::_owner = "owner";
const std::string Content::Cols::_displayname = "displayname";
const std::string Content::Cols::_caption = "caption";
const std::string Content::Cols::_likes = "likes";
const std::string Content::Cols::_dislikes = "dislikes";
const std::string Content::Cols::_views = "views";
const std::string Content::Cols::_flags = "flags";
const std::string Content::Cols::_displayname_tsvector = "displayname_tsvector";
const std::string Content::Cols::_caption_tsvector = "caption_tsvector";
const std::string Content::Cols::_ispublic = "ispublic";
const std::string Content::Cols::_cancomment = "cancomment";
const std::string Content::primaryKeyName = "contentid";
const bool Content::hasPrimaryKey = true;
const std::string Content::tableName = "content";

const std::vector<typename Content::MetaData> Content::metaData_={
{"contentid","int64_t","bigint",8,1,1,1},
{"filename","std::string","text",0,0,0,1},
{"owner","int64_t","bigint",8,0,0,1},
{"displayname","std::string","text",0,0,0,0},
{"caption","std::string","text",0,0,0,0},
{"likes","int64_t","bigint",8,0,0,1},
{"dislikes","int64_t","bigint",8,0,0,1},
{"views","int64_t","bigint",8,0,0,1},
{"flags","int64_t","bigint",8,0,0,1},
{"displayname_tsvector","std::string","text",0,0,0,0},
{"caption_tsvector","std::string","text",0,0,0,0},
{"ispublic","std::string","bit",0,0,0,0},
{"cancomment","std::string","bit",0,0,0,0}
};
const std::string &Content::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Content::Content(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["contentid"].isNull())
        {
            contentid_=std::make_shared<int64_t>(r["contentid"].as<int64_t>());
        }
        if(!r["filename"].isNull())
        {
            filename_=std::make_shared<std::string>(r["filename"].as<std::string>());
        }
        if(!r["owner"].isNull())
        {
            owner_=std::make_shared<int64_t>(r["owner"].as<int64_t>());
        }
        if(!r["displayname"].isNull())
        {
            displayname_=std::make_shared<std::string>(r["displayname"].as<std::string>());
        }
        if(!r["caption"].isNull())
        {
            caption_=std::make_shared<std::string>(r["caption"].as<std::string>());
        }
        if(!r["likes"].isNull())
        {
            likes_=std::make_shared<int64_t>(r["likes"].as<int64_t>());
        }
        if(!r["dislikes"].isNull())
        {
            dislikes_=std::make_shared<int64_t>(r["dislikes"].as<int64_t>());
        }
        if(!r["views"].isNull())
        {
            views_=std::make_shared<int64_t>(r["views"].as<int64_t>());
        }
        if(!r["flags"].isNull())
        {
            flags_=std::make_shared<int64_t>(r["flags"].as<int64_t>());
        }
        if(!r["displayname_tsvector"].isNull())
        {
            displaynameTsvector_=std::make_shared<std::string>(r["displayname_tsvector"].as<std::string>());
        }
        if(!r["caption_tsvector"].isNull())
        {
            captionTsvector_=std::make_shared<std::string>(r["caption_tsvector"].as<std::string>());
        }
        if(!r["ispublic"].isNull())
        {
            ispublic_=std::make_shared<std::string>(r["ispublic"].as<std::string>());
        }
        if(!r["cancomment"].isNull())
        {
            cancomment_=std::make_shared<std::string>(r["cancomment"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 13 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            contentid_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            filename_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            owner_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            displayname_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            caption_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            likes_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            dislikes_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            views_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            flags_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            displaynameTsvector_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            captionTsvector_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            ispublic_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            cancomment_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Content::Content(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 13)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            contentid_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            filename_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            owner_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            displayname_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            caption_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            likes_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            dislikes_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            views_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            flags_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            displaynameTsvector_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            captionTsvector_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            ispublic_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            cancomment_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
}

Content::Content(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("contentid"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["contentid"].isNull())
        {
            contentid_=std::make_shared<int64_t>((int64_t)pJson["contentid"].asInt64());
        }
    }
    if(pJson.isMember("filename"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["filename"].isNull())
        {
            filename_=std::make_shared<std::string>(pJson["filename"].asString());
        }
    }
    if(pJson.isMember("owner"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["owner"].isNull())
        {
            owner_=std::make_shared<int64_t>((int64_t)pJson["owner"].asInt64());
        }
    }
    if(pJson.isMember("displayname"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["displayname"].isNull())
        {
            displayname_=std::make_shared<std::string>(pJson["displayname"].asString());
        }
    }
    if(pJson.isMember("caption"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["caption"].isNull())
        {
            caption_=std::make_shared<std::string>(pJson["caption"].asString());
        }
    }
    if(pJson.isMember("likes"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["likes"].isNull())
        {
            likes_=std::make_shared<int64_t>((int64_t)pJson["likes"].asInt64());
        }
    }
    if(pJson.isMember("dislikes"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["dislikes"].isNull())
        {
            dislikes_=std::make_shared<int64_t>((int64_t)pJson["dislikes"].asInt64());
        }
    }
    if(pJson.isMember("views"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["views"].isNull())
        {
            views_=std::make_shared<int64_t>((int64_t)pJson["views"].asInt64());
        }
    }
    if(pJson.isMember("flags"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["flags"].isNull())
        {
            flags_=std::make_shared<int64_t>((int64_t)pJson["flags"].asInt64());
        }
    }
    if(pJson.isMember("displayname_tsvector"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["displayname_tsvector"].isNull())
        {
            displaynameTsvector_=std::make_shared<std::string>(pJson["displayname_tsvector"].asString());
        }
    }
    if(pJson.isMember("caption_tsvector"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["caption_tsvector"].isNull())
        {
            captionTsvector_=std::make_shared<std::string>(pJson["caption_tsvector"].asString());
        }
    }
    if(pJson.isMember("ispublic"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["ispublic"].isNull())
        {
            ispublic_=std::make_shared<std::string>(pJson["ispublic"].asString());
        }
    }
    if(pJson.isMember("cancomment"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["cancomment"].isNull())
        {
            cancomment_=std::make_shared<std::string>(pJson["cancomment"].asString());
        }
    }
}

void Content::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 13)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            contentid_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            filename_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            owner_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            displayname_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            caption_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            likes_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            dislikes_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            views_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            flags_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            displaynameTsvector_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            captionTsvector_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            ispublic_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            cancomment_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
}

void Content::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("contentid"))
    {
        if(!pJson["contentid"].isNull())
        {
            contentid_=std::make_shared<int64_t>((int64_t)pJson["contentid"].asInt64());
        }
    }
    if(pJson.isMember("filename"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["filename"].isNull())
        {
            filename_=std::make_shared<std::string>(pJson["filename"].asString());
        }
    }
    if(pJson.isMember("owner"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["owner"].isNull())
        {
            owner_=std::make_shared<int64_t>((int64_t)pJson["owner"].asInt64());
        }
    }
    if(pJson.isMember("displayname"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["displayname"].isNull())
        {
            displayname_=std::make_shared<std::string>(pJson["displayname"].asString());
        }
    }
    if(pJson.isMember("caption"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["caption"].isNull())
        {
            caption_=std::make_shared<std::string>(pJson["caption"].asString());
        }
    }
    if(pJson.isMember("likes"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["likes"].isNull())
        {
            likes_=std::make_shared<int64_t>((int64_t)pJson["likes"].asInt64());
        }
    }
    if(pJson.isMember("dislikes"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["dislikes"].isNull())
        {
            dislikes_=std::make_shared<int64_t>((int64_t)pJson["dislikes"].asInt64());
        }
    }
    if(pJson.isMember("views"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["views"].isNull())
        {
            views_=std::make_shared<int64_t>((int64_t)pJson["views"].asInt64());
        }
    }
    if(pJson.isMember("flags"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["flags"].isNull())
        {
            flags_=std::make_shared<int64_t>((int64_t)pJson["flags"].asInt64());
        }
    }
    if(pJson.isMember("displayname_tsvector"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["displayname_tsvector"].isNull())
        {
            displaynameTsvector_=std::make_shared<std::string>(pJson["displayname_tsvector"].asString());
        }
    }
    if(pJson.isMember("caption_tsvector"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["caption_tsvector"].isNull())
        {
            captionTsvector_=std::make_shared<std::string>(pJson["caption_tsvector"].asString());
        }
    }
    if(pJson.isMember("ispublic"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["ispublic"].isNull())
        {
            ispublic_=std::make_shared<std::string>(pJson["ispublic"].asString());
        }
    }
    if(pJson.isMember("cancomment"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["cancomment"].isNull())
        {
            cancomment_=std::make_shared<std::string>(pJson["cancomment"].asString());
        }
    }
}

const int64_t &Content::getValueOfContentid() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(contentid_)
        return *contentid_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Content::getContentid() const noexcept
{
    return contentid_;
}
void Content::setContentid(const int64_t &pContentid) noexcept
{
    contentid_ = std::make_shared<int64_t>(pContentid);
    dirtyFlag_[0] = true;
}
const typename Content::PrimaryKeyType & Content::getPrimaryKey() const
{
    assert(contentid_);
    return *contentid_;
}

const std::string &Content::getValueOfFilename() const noexcept
{
    const static std::string defaultValue = std::string();
    if(filename_)
        return *filename_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Content::getFilename() const noexcept
{
    return filename_;
}
void Content::setFilename(const std::string &pFilename) noexcept
{
    filename_ = std::make_shared<std::string>(pFilename);
    dirtyFlag_[1] = true;
}
void Content::setFilename(std::string &&pFilename) noexcept
{
    filename_ = std::make_shared<std::string>(std::move(pFilename));
    dirtyFlag_[1] = true;
}

const int64_t &Content::getValueOfOwner() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(owner_)
        return *owner_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Content::getOwner() const noexcept
{
    return owner_;
}
void Content::setOwner(const int64_t &pOwner) noexcept
{
    owner_ = std::make_shared<int64_t>(pOwner);
    dirtyFlag_[2] = true;
}

const std::string &Content::getValueOfDisplayname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(displayname_)
        return *displayname_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Content::getDisplayname() const noexcept
{
    return displayname_;
}
void Content::setDisplayname(const std::string &pDisplayname) noexcept
{
    displayname_ = std::make_shared<std::string>(pDisplayname);
    dirtyFlag_[3] = true;
}
void Content::setDisplayname(std::string &&pDisplayname) noexcept
{
    displayname_ = std::make_shared<std::string>(std::move(pDisplayname));
    dirtyFlag_[3] = true;
}
void Content::setDisplaynameToNull() noexcept
{
    displayname_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Content::getValueOfCaption() const noexcept
{
    const static std::string defaultValue = std::string();
    if(caption_)
        return *caption_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Content::getCaption() const noexcept
{
    return caption_;
}
void Content::setCaption(const std::string &pCaption) noexcept
{
    caption_ = std::make_shared<std::string>(pCaption);
    dirtyFlag_[4] = true;
}
void Content::setCaption(std::string &&pCaption) noexcept
{
    caption_ = std::make_shared<std::string>(std::move(pCaption));
    dirtyFlag_[4] = true;
}
void Content::setCaptionToNull() noexcept
{
    caption_.reset();
    dirtyFlag_[4] = true;
}

const int64_t &Content::getValueOfLikes() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(likes_)
        return *likes_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Content::getLikes() const noexcept
{
    return likes_;
}
void Content::setLikes(const int64_t &pLikes) noexcept
{
    likes_ = std::make_shared<int64_t>(pLikes);
    dirtyFlag_[5] = true;
}

const int64_t &Content::getValueOfDislikes() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(dislikes_)
        return *dislikes_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Content::getDislikes() const noexcept
{
    return dislikes_;
}
void Content::setDislikes(const int64_t &pDislikes) noexcept
{
    dislikes_ = std::make_shared<int64_t>(pDislikes);
    dirtyFlag_[6] = true;
}

const int64_t &Content::getValueOfViews() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(views_)
        return *views_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Content::getViews() const noexcept
{
    return views_;
}
void Content::setViews(const int64_t &pViews) noexcept
{
    views_ = std::make_shared<int64_t>(pViews);
    dirtyFlag_[7] = true;
}

const int64_t &Content::getValueOfFlags() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(flags_)
        return *flags_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Content::getFlags() const noexcept
{
    return flags_;
}
void Content::setFlags(const int64_t &pFlags) noexcept
{
    flags_ = std::make_shared<int64_t>(pFlags);
    dirtyFlag_[8] = true;
}

const std::string &Content::getValueOfDisplaynameTsvector() const noexcept
{
    const static std::string defaultValue = std::string();
    if(displaynameTsvector_)
        return *displaynameTsvector_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Content::getDisplaynameTsvector() const noexcept
{
    return displaynameTsvector_;
}
void Content::setDisplaynameTsvector(const std::string &pDisplaynameTsvector) noexcept
{
    displaynameTsvector_ = std::make_shared<std::string>(pDisplaynameTsvector);
    dirtyFlag_[9] = true;
}
void Content::setDisplaynameTsvector(std::string &&pDisplaynameTsvector) noexcept
{
    displaynameTsvector_ = std::make_shared<std::string>(std::move(pDisplaynameTsvector));
    dirtyFlag_[9] = true;
}
void Content::setDisplaynameTsvectorToNull() noexcept
{
    displaynameTsvector_.reset();
    dirtyFlag_[9] = true;
}

const std::string &Content::getValueOfCaptionTsvector() const noexcept
{
    const static std::string defaultValue = std::string();
    if(captionTsvector_)
        return *captionTsvector_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Content::getCaptionTsvector() const noexcept
{
    return captionTsvector_;
}
void Content::setCaptionTsvector(const std::string &pCaptionTsvector) noexcept
{
    captionTsvector_ = std::make_shared<std::string>(pCaptionTsvector);
    dirtyFlag_[10] = true;
}
void Content::setCaptionTsvector(std::string &&pCaptionTsvector) noexcept
{
    captionTsvector_ = std::make_shared<std::string>(std::move(pCaptionTsvector));
    dirtyFlag_[10] = true;
}
void Content::setCaptionTsvectorToNull() noexcept
{
    captionTsvector_.reset();
    dirtyFlag_[10] = true;
}

const std::string &Content::getValueOfIspublic() const noexcept
{
    const static std::string defaultValue = std::string();
    if(ispublic_)
        return *ispublic_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Content::getIspublic() const noexcept
{
    return ispublic_;
}
void Content::setIspublic(const std::string &pIspublic) noexcept
{
    ispublic_ = std::make_shared<std::string>(pIspublic);
    dirtyFlag_[11] = true;
}
void Content::setIspublic(std::string &&pIspublic) noexcept
{
    ispublic_ = std::make_shared<std::string>(std::move(pIspublic));
    dirtyFlag_[11] = true;
}
void Content::setIspublicToNull() noexcept
{
    ispublic_.reset();
    dirtyFlag_[11] = true;
}

const std::string &Content::getValueOfCancomment() const noexcept
{
    const static std::string defaultValue = std::string();
    if(cancomment_)
        return *cancomment_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Content::getCancomment() const noexcept
{
    return cancomment_;
}
void Content::setCancomment(const std::string &pCancomment) noexcept
{
    cancomment_ = std::make_shared<std::string>(pCancomment);
    dirtyFlag_[12] = true;
}
void Content::setCancomment(std::string &&pCancomment) noexcept
{
    cancomment_ = std::make_shared<std::string>(std::move(pCancomment));
    dirtyFlag_[12] = true;
}
void Content::setCancommentToNull() noexcept
{
    cancomment_.reset();
    dirtyFlag_[12] = true;
}

void Content::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Content::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "filename",
        "owner",
        "displayname",
        "caption",
        "likes",
        "dislikes",
        "views",
        "flags",
        "displayname_tsvector",
        "caption_tsvector",
        "ispublic",
        "cancomment"
    };
    return inCols;
}

void Content::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getFilename())
        {
            binder << getValueOfFilename();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getOwner())
        {
            binder << getValueOfOwner();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getDisplayname())
        {
            binder << getValueOfDisplayname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getCaption())
        {
            binder << getValueOfCaption();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getLikes())
        {
            binder << getValueOfLikes();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getDislikes())
        {
            binder << getValueOfDislikes();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getViews())
        {
            binder << getValueOfViews();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getFlags())
        {
            binder << getValueOfFlags();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getDisplaynameTsvector())
        {
            binder << getValueOfDisplaynameTsvector();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCaptionTsvector())
        {
            binder << getValueOfCaptionTsvector();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getIspublic())
        {
            binder << getValueOfIspublic();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getCancomment())
        {
            binder << getValueOfCancomment();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Content::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    return ret;
}

void Content::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getFilename())
        {
            binder << getValueOfFilename();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getOwner())
        {
            binder << getValueOfOwner();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getDisplayname())
        {
            binder << getValueOfDisplayname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getCaption())
        {
            binder << getValueOfCaption();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getLikes())
        {
            binder << getValueOfLikes();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getDislikes())
        {
            binder << getValueOfDislikes();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getViews())
        {
            binder << getValueOfViews();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getFlags())
        {
            binder << getValueOfFlags();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getDisplaynameTsvector())
        {
            binder << getValueOfDisplaynameTsvector();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCaptionTsvector())
        {
            binder << getValueOfCaptionTsvector();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getIspublic())
        {
            binder << getValueOfIspublic();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getCancomment())
        {
            binder << getValueOfCancomment();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Content::toJson() const
{
    Json::Value ret;
    if(getContentid())
    {
        ret["contentid"]=(Json::Int64)getValueOfContentid();
    }
    else
    {
        ret["contentid"]=Json::Value();
    }
    if(getFilename())
    {
        ret["filename"]=getValueOfFilename();
    }
    else
    {
        ret["filename"]=Json::Value();
    }
    if(getOwner())
    {
        ret["owner"]=(Json::Int64)getValueOfOwner();
    }
    else
    {
        ret["owner"]=Json::Value();
    }
    if(getDisplayname())
    {
        ret["displayname"]=getValueOfDisplayname();
    }
    else
    {
        ret["displayname"]=Json::Value();
    }
    if(getCaption())
    {
        ret["caption"]=getValueOfCaption();
    }
    else
    {
        ret["caption"]=Json::Value();
    }
    if(getLikes())
    {
        ret["likes"]=(Json::Int64)getValueOfLikes();
    }
    else
    {
        ret["likes"]=Json::Value();
    }
    if(getDislikes())
    {
        ret["dislikes"]=(Json::Int64)getValueOfDislikes();
    }
    else
    {
        ret["dislikes"]=Json::Value();
    }
    if(getViews())
    {
        ret["views"]=(Json::Int64)getValueOfViews();
    }
    else
    {
        ret["views"]=Json::Value();
    }
    if(getFlags())
    {
        ret["flags"]=(Json::Int64)getValueOfFlags();
    }
    else
    {
        ret["flags"]=Json::Value();
    }
    if(getDisplaynameTsvector())
    {
        ret["displayname_tsvector"]=getValueOfDisplaynameTsvector();
    }
    else
    {
        ret["displayname_tsvector"]=Json::Value();
    }
    if(getCaptionTsvector())
    {
        ret["caption_tsvector"]=getValueOfCaptionTsvector();
    }
    else
    {
        ret["caption_tsvector"]=Json::Value();
    }
    if(getIspublic())
    {
        ret["ispublic"]=getValueOfIspublic();
    }
    else
    {
        ret["ispublic"]=Json::Value();
    }
    if(getCancomment())
    {
        ret["cancomment"]=getValueOfCancomment();
    }
    else
    {
        ret["cancomment"]=Json::Value();
    }
    return ret;
}

Json::Value Content::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 13)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getContentid())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfContentid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getFilename())
            {
                ret[pMasqueradingVector[1]]=getValueOfFilename();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getOwner())
            {
                ret[pMasqueradingVector[2]]=(Json::Int64)getValueOfOwner();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getDisplayname())
            {
                ret[pMasqueradingVector[3]]=getValueOfDisplayname();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getCaption())
            {
                ret[pMasqueradingVector[4]]=getValueOfCaption();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getLikes())
            {
                ret[pMasqueradingVector[5]]=(Json::Int64)getValueOfLikes();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getDislikes())
            {
                ret[pMasqueradingVector[6]]=(Json::Int64)getValueOfDislikes();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getViews())
            {
                ret[pMasqueradingVector[7]]=(Json::Int64)getValueOfViews();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getFlags())
            {
                ret[pMasqueradingVector[8]]=(Json::Int64)getValueOfFlags();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getDisplaynameTsvector())
            {
                ret[pMasqueradingVector[9]]=getValueOfDisplaynameTsvector();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getCaptionTsvector())
            {
                ret[pMasqueradingVector[10]]=getValueOfCaptionTsvector();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getIspublic())
            {
                ret[pMasqueradingVector[11]]=getValueOfIspublic();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getCancomment())
            {
                ret[pMasqueradingVector[12]]=getValueOfCancomment();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getContentid())
    {
        ret["contentid"]=(Json::Int64)getValueOfContentid();
    }
    else
    {
        ret["contentid"]=Json::Value();
    }
    if(getFilename())
    {
        ret["filename"]=getValueOfFilename();
    }
    else
    {
        ret["filename"]=Json::Value();
    }
    if(getOwner())
    {
        ret["owner"]=(Json::Int64)getValueOfOwner();
    }
    else
    {
        ret["owner"]=Json::Value();
    }
    if(getDisplayname())
    {
        ret["displayname"]=getValueOfDisplayname();
    }
    else
    {
        ret["displayname"]=Json::Value();
    }
    if(getCaption())
    {
        ret["caption"]=getValueOfCaption();
    }
    else
    {
        ret["caption"]=Json::Value();
    }
    if(getLikes())
    {
        ret["likes"]=(Json::Int64)getValueOfLikes();
    }
    else
    {
        ret["likes"]=Json::Value();
    }
    if(getDislikes())
    {
        ret["dislikes"]=(Json::Int64)getValueOfDislikes();
    }
    else
    {
        ret["dislikes"]=Json::Value();
    }
    if(getViews())
    {
        ret["views"]=(Json::Int64)getValueOfViews();
    }
    else
    {
        ret["views"]=Json::Value();
    }
    if(getFlags())
    {
        ret["flags"]=(Json::Int64)getValueOfFlags();
    }
    else
    {
        ret["flags"]=Json::Value();
    }
    if(getDisplaynameTsvector())
    {
        ret["displayname_tsvector"]=getValueOfDisplaynameTsvector();
    }
    else
    {
        ret["displayname_tsvector"]=Json::Value();
    }
    if(getCaptionTsvector())
    {
        ret["caption_tsvector"]=getValueOfCaptionTsvector();
    }
    else
    {
        ret["caption_tsvector"]=Json::Value();
    }
    if(getIspublic())
    {
        ret["ispublic"]=getValueOfIspublic();
    }
    else
    {
        ret["ispublic"]=Json::Value();
    }
    if(getCancomment())
    {
        ret["cancomment"]=getValueOfCancomment();
    }
    else
    {
        ret["cancomment"]=Json::Value();
    }
    return ret;
}

bool Content::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("contentid"))
    {
        if(!validJsonOfField(0, "contentid", pJson["contentid"], err, true))
            return false;
    }
    if(pJson.isMember("filename"))
    {
        if(!validJsonOfField(1, "filename", pJson["filename"], err, true))
            return false;
    }
    else
    {
        err="The filename column cannot be null";
        return false;
    }
    if(pJson.isMember("owner"))
    {
        if(!validJsonOfField(2, "owner", pJson["owner"], err, true))
            return false;
    }
    else
    {
        err="The owner column cannot be null";
        return false;
    }
    if(pJson.isMember("displayname"))
    {
        if(!validJsonOfField(3, "displayname", pJson["displayname"], err, true))
            return false;
    }
    if(pJson.isMember("caption"))
    {
        if(!validJsonOfField(4, "caption", pJson["caption"], err, true))
            return false;
    }
    if(pJson.isMember("likes"))
    {
        if(!validJsonOfField(5, "likes", pJson["likes"], err, true))
            return false;
    }
    else
    {
        err="The likes column cannot be null";
        return false;
    }
    if(pJson.isMember("dislikes"))
    {
        if(!validJsonOfField(6, "dislikes", pJson["dislikes"], err, true))
            return false;
    }
    else
    {
        err="The dislikes column cannot be null";
        return false;
    }
    if(pJson.isMember("views"))
    {
        if(!validJsonOfField(7, "views", pJson["views"], err, true))
            return false;
    }
    else
    {
        err="The views column cannot be null";
        return false;
    }
    if(pJson.isMember("flags"))
    {
        if(!validJsonOfField(8, "flags", pJson["flags"], err, true))
            return false;
    }
    else
    {
        err="The flags column cannot be null";
        return false;
    }
    if(pJson.isMember("displayname_tsvector"))
    {
        if(!validJsonOfField(9, "displayname_tsvector", pJson["displayname_tsvector"], err, true))
            return false;
    }
    if(pJson.isMember("caption_tsvector"))
    {
        if(!validJsonOfField(10, "caption_tsvector", pJson["caption_tsvector"], err, true))
            return false;
    }
    if(pJson.isMember("ispublic"))
    {
        if(!validJsonOfField(11, "ispublic", pJson["ispublic"], err, true))
            return false;
    }
    if(pJson.isMember("cancomment"))
    {
        if(!validJsonOfField(12, "cancomment", pJson["cancomment"], err, true))
            return false;
    }
    return true;
}
bool Content::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 13)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[8] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Content::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("contentid"))
    {
        if(!validJsonOfField(0, "contentid", pJson["contentid"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("filename"))
    {
        if(!validJsonOfField(1, "filename", pJson["filename"], err, false))
            return false;
    }
    if(pJson.isMember("owner"))
    {
        if(!validJsonOfField(2, "owner", pJson["owner"], err, false))
            return false;
    }
    if(pJson.isMember("displayname"))
    {
        if(!validJsonOfField(3, "displayname", pJson["displayname"], err, false))
            return false;
    }
    if(pJson.isMember("caption"))
    {
        if(!validJsonOfField(4, "caption", pJson["caption"], err, false))
            return false;
    }
    if(pJson.isMember("likes"))
    {
        if(!validJsonOfField(5, "likes", pJson["likes"], err, false))
            return false;
    }
    if(pJson.isMember("dislikes"))
    {
        if(!validJsonOfField(6, "dislikes", pJson["dislikes"], err, false))
            return false;
    }
    if(pJson.isMember("views"))
    {
        if(!validJsonOfField(7, "views", pJson["views"], err, false))
            return false;
    }
    if(pJson.isMember("flags"))
    {
        if(!validJsonOfField(8, "flags", pJson["flags"], err, false))
            return false;
    }
    if(pJson.isMember("displayname_tsvector"))
    {
        if(!validJsonOfField(9, "displayname_tsvector", pJson["displayname_tsvector"], err, false))
            return false;
    }
    if(pJson.isMember("caption_tsvector"))
    {
        if(!validJsonOfField(10, "caption_tsvector", pJson["caption_tsvector"], err, false))
            return false;
    }
    if(pJson.isMember("ispublic"))
    {
        if(!validJsonOfField(11, "ispublic", pJson["ispublic"], err, false))
            return false;
    }
    if(pJson.isMember("cancomment"))
    {
        if(!validJsonOfField(12, "cancomment", pJson["cancomment"], err, false))
            return false;
    }
    return true;
}
bool Content::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 13)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Content::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
