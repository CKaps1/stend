/**
 *
 *  Acl.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Acl.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::stend;

const std::string Acl::Cols::_aclid = "aclid";
const std::string Acl::Cols::_contentid = "contentid";
const std::string Acl::Cols::_userid = "userid";
const std::string Acl::Cols::_permission = "permission";
const std::string Acl::Cols::_owner = "owner";
const std::string Acl::primaryKeyName = "aclid";
const bool Acl::hasPrimaryKey = true;
const std::string Acl::tableName = "acl";

const std::vector<typename Acl::MetaData> Acl::metaData_={
{"aclid","int64_t","bigint",8,1,1,1},
{"contentid","int64_t","bigint",8,0,0,1},
{"userid","int64_t","bigint",8,0,0,1},
{"permission","short","smallint",2,0,0,1},
{"owner","int64_t","bigint",8,0,0,1}
};
const std::string &Acl::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Acl::Acl(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["aclid"].isNull())
        {
            aclid_=std::make_shared<int64_t>(r["aclid"].as<int64_t>());
        }
        if(!r["contentid"].isNull())
        {
            contentid_=std::make_shared<int64_t>(r["contentid"].as<int64_t>());
        }
        if(!r["userid"].isNull())
        {
            userid_=std::make_shared<int64_t>(r["userid"].as<int64_t>());
        }
        if(!r["permission"].isNull())
        {
            permission_=std::make_shared<short>(r["permission"].as<short>());
        }
        if(!r["owner"].isNull())
        {
            owner_=std::make_shared<int64_t>(r["owner"].as<int64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 5 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            aclid_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            contentid_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            userid_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            permission_=std::make_shared<short>(r[index].as<short>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            owner_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
    }

}

Acl::Acl(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            aclid_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            contentid_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            userid_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            permission_=std::make_shared<short>((short)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            owner_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
}

Acl::Acl(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("aclid"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["aclid"].isNull())
        {
            aclid_=std::make_shared<int64_t>((int64_t)pJson["aclid"].asInt64());
        }
    }
    if(pJson.isMember("contentid"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["contentid"].isNull())
        {
            contentid_=std::make_shared<int64_t>((int64_t)pJson["contentid"].asInt64());
        }
    }
    if(pJson.isMember("userid"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["userid"].isNull())
        {
            userid_=std::make_shared<int64_t>((int64_t)pJson["userid"].asInt64());
        }
    }
    if(pJson.isMember("permission"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["permission"].isNull())
        {
            permission_=std::make_shared<short>((short)pJson["permission"].asInt64());
        }
    }
    if(pJson.isMember("owner"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["owner"].isNull())
        {
            owner_=std::make_shared<int64_t>((int64_t)pJson["owner"].asInt64());
        }
    }
}

void Acl::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            aclid_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            contentid_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            userid_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            permission_=std::make_shared<short>((short)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            owner_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
}

void Acl::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("aclid"))
    {
        if(!pJson["aclid"].isNull())
        {
            aclid_=std::make_shared<int64_t>((int64_t)pJson["aclid"].asInt64());
        }
    }
    if(pJson.isMember("contentid"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["contentid"].isNull())
        {
            contentid_=std::make_shared<int64_t>((int64_t)pJson["contentid"].asInt64());
        }
    }
    if(pJson.isMember("userid"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["userid"].isNull())
        {
            userid_=std::make_shared<int64_t>((int64_t)pJson["userid"].asInt64());
        }
    }
    if(pJson.isMember("permission"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["permission"].isNull())
        {
            permission_=std::make_shared<short>((short)pJson["permission"].asInt64());
        }
    }
    if(pJson.isMember("owner"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["owner"].isNull())
        {
            owner_=std::make_shared<int64_t>((int64_t)pJson["owner"].asInt64());
        }
    }
}

const int64_t &Acl::getValueOfAclid() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(aclid_)
        return *aclid_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Acl::getAclid() const noexcept
{
    return aclid_;
}
void Acl::setAclid(const int64_t &pAclid) noexcept
{
    aclid_ = std::make_shared<int64_t>(pAclid);
    dirtyFlag_[0] = true;
}
const typename Acl::PrimaryKeyType & Acl::getPrimaryKey() const
{
    assert(aclid_);
    return *aclid_;
}

const int64_t &Acl::getValueOfContentid() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(contentid_)
        return *contentid_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Acl::getContentid() const noexcept
{
    return contentid_;
}
void Acl::setContentid(const int64_t &pContentid) noexcept
{
    contentid_ = std::make_shared<int64_t>(pContentid);
    dirtyFlag_[1] = true;
}

const int64_t &Acl::getValueOfUserid() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(userid_)
        return *userid_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Acl::getUserid() const noexcept
{
    return userid_;
}
void Acl::setUserid(const int64_t &pUserid) noexcept
{
    userid_ = std::make_shared<int64_t>(pUserid);
    dirtyFlag_[2] = true;
}

const short &Acl::getValueOfPermission() const noexcept
{
    const static short defaultValue = short();
    if(permission_)
        return *permission_;
    return defaultValue;
}
const std::shared_ptr<short> &Acl::getPermission() const noexcept
{
    return permission_;
}
void Acl::setPermission(const short &pPermission) noexcept
{
    permission_ = std::make_shared<short>(pPermission);
    dirtyFlag_[3] = true;
}

const int64_t &Acl::getValueOfOwner() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(owner_)
        return *owner_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Acl::getOwner() const noexcept
{
    return owner_;
}
void Acl::setOwner(const int64_t &pOwner) noexcept
{
    owner_ = std::make_shared<int64_t>(pOwner);
    dirtyFlag_[4] = true;
}

void Acl::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Acl::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "contentid",
        "userid",
        "permission",
        "owner"
    };
    return inCols;
}

void Acl::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getContentid())
        {
            binder << getValueOfContentid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUserid())
        {
            binder << getValueOfUserid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getPermission())
        {
            binder << getValueOfPermission();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getOwner())
        {
            binder << getValueOfOwner();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Acl::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    return ret;
}

void Acl::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getContentid())
        {
            binder << getValueOfContentid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUserid())
        {
            binder << getValueOfUserid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getPermission())
        {
            binder << getValueOfPermission();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getOwner())
        {
            binder << getValueOfOwner();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Acl::toJson() const
{
    Json::Value ret;
    if(getAclid())
    {
        ret["aclid"]=(Json::Int64)getValueOfAclid();
    }
    else
    {
        ret["aclid"]=Json::Value();
    }
    if(getContentid())
    {
        ret["contentid"]=(Json::Int64)getValueOfContentid();
    }
    else
    {
        ret["contentid"]=Json::Value();
    }
    if(getUserid())
    {
        ret["userid"]=(Json::Int64)getValueOfUserid();
    }
    else
    {
        ret["userid"]=Json::Value();
    }
    if(getPermission())
    {
        ret["permission"]=getValueOfPermission();
    }
    else
    {
        ret["permission"]=Json::Value();
    }
    if(getOwner())
    {
        ret["owner"]=(Json::Int64)getValueOfOwner();
    }
    else
    {
        ret["owner"]=Json::Value();
    }
    return ret;
}

Json::Value Acl::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 5)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getAclid())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfAclid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getContentid())
            {
                ret[pMasqueradingVector[1]]=(Json::Int64)getValueOfContentid();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getUserid())
            {
                ret[pMasqueradingVector[2]]=(Json::Int64)getValueOfUserid();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getPermission())
            {
                ret[pMasqueradingVector[3]]=getValueOfPermission();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getOwner())
            {
                ret[pMasqueradingVector[4]]=(Json::Int64)getValueOfOwner();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getAclid())
    {
        ret["aclid"]=(Json::Int64)getValueOfAclid();
    }
    else
    {
        ret["aclid"]=Json::Value();
    }
    if(getContentid())
    {
        ret["contentid"]=(Json::Int64)getValueOfContentid();
    }
    else
    {
        ret["contentid"]=Json::Value();
    }
    if(getUserid())
    {
        ret["userid"]=(Json::Int64)getValueOfUserid();
    }
    else
    {
        ret["userid"]=Json::Value();
    }
    if(getPermission())
    {
        ret["permission"]=getValueOfPermission();
    }
    else
    {
        ret["permission"]=Json::Value();
    }
    if(getOwner())
    {
        ret["owner"]=(Json::Int64)getValueOfOwner();
    }
    else
    {
        ret["owner"]=Json::Value();
    }
    return ret;
}

bool Acl::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("aclid"))
    {
        if(!validJsonOfField(0, "aclid", pJson["aclid"], err, true))
            return false;
    }
    if(pJson.isMember("contentid"))
    {
        if(!validJsonOfField(1, "contentid", pJson["contentid"], err, true))
            return false;
    }
    else
    {
        err="The contentid column cannot be null";
        return false;
    }
    if(pJson.isMember("userid"))
    {
        if(!validJsonOfField(2, "userid", pJson["userid"], err, true))
            return false;
    }
    else
    {
        err="The userid column cannot be null";
        return false;
    }
    if(pJson.isMember("permission"))
    {
        if(!validJsonOfField(3, "permission", pJson["permission"], err, true))
            return false;
    }
    else
    {
        err="The permission column cannot be null";
        return false;
    }
    if(pJson.isMember("owner"))
    {
        if(!validJsonOfField(4, "owner", pJson["owner"], err, true))
            return false;
    }
    else
    {
        err="The owner column cannot be null";
        return false;
    }
    return true;
}
bool Acl::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Acl::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("aclid"))
    {
        if(!validJsonOfField(0, "aclid", pJson["aclid"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("contentid"))
    {
        if(!validJsonOfField(1, "contentid", pJson["contentid"], err, false))
            return false;
    }
    if(pJson.isMember("userid"))
    {
        if(!validJsonOfField(2, "userid", pJson["userid"], err, false))
            return false;
    }
    if(pJson.isMember("permission"))
    {
        if(!validJsonOfField(3, "permission", pJson["permission"], err, false))
            return false;
    }
    if(pJson.isMember("owner"))
    {
        if(!validJsonOfField(4, "owner", pJson["owner"], err, false))
            return false;
    }
    return true;
}
bool Acl::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                           const std::vector<std::string> &pMasqueradingVector,
                                           std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Acl::validJsonOfField(size_t index,
                           const std::string &fieldName,
                           const Json::Value &pJson,
                           std::string &err,
                           bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
