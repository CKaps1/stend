/**
 *
 *  Votes.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Votes.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::stend;

const std::string Votes::Cols::_voteid = "voteid";
const std::string Votes::Cols::_commentid = "commentid";
const std::string Votes::Cols::_userid = "userid";
const std::string Votes::Cols::_vote = "vote";
const std::string Votes::primaryKeyName = "voteid";
const bool Votes::hasPrimaryKey = true;
const std::string Votes::tableName = "votes";

const std::vector<typename Votes::MetaData> Votes::metaData_={
{"voteid","int64_t","bigint",8,1,1,1},
{"commentid","int64_t","bigint",8,0,0,1},
{"userid","int64_t","bigint",8,0,0,1},
{"vote","std::string","bit",0,0,0,1}
};
const std::string &Votes::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Votes::Votes(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["voteid"].isNull())
        {
            voteid_=std::make_shared<int64_t>(r["voteid"].as<int64_t>());
        }
        if(!r["commentid"].isNull())
        {
            commentid_=std::make_shared<int64_t>(r["commentid"].as<int64_t>());
        }
        if(!r["userid"].isNull())
        {
            userid_=std::make_shared<int64_t>(r["userid"].as<int64_t>());
        }
        if(!r["vote"].isNull())
        {
            vote_=std::make_shared<std::string>(r["vote"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 4 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            voteid_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            commentid_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            userid_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            vote_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Votes::Votes(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            voteid_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            commentid_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            userid_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            vote_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
}

Votes::Votes(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("voteid"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["voteid"].isNull())
        {
            voteid_=std::make_shared<int64_t>((int64_t)pJson["voteid"].asInt64());
        }
    }
    if(pJson.isMember("commentid"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["commentid"].isNull())
        {
            commentid_=std::make_shared<int64_t>((int64_t)pJson["commentid"].asInt64());
        }
    }
    if(pJson.isMember("userid"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["userid"].isNull())
        {
            userid_=std::make_shared<int64_t>((int64_t)pJson["userid"].asInt64());
        }
    }
    if(pJson.isMember("vote"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["vote"].isNull())
        {
            vote_=std::make_shared<std::string>(pJson["vote"].asString());
        }
    }
}

void Votes::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            voteid_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            commentid_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            userid_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            vote_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
}

void Votes::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("voteid"))
    {
        if(!pJson["voteid"].isNull())
        {
            voteid_=std::make_shared<int64_t>((int64_t)pJson["voteid"].asInt64());
        }
    }
    if(pJson.isMember("commentid"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["commentid"].isNull())
        {
            commentid_=std::make_shared<int64_t>((int64_t)pJson["commentid"].asInt64());
        }
    }
    if(pJson.isMember("userid"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["userid"].isNull())
        {
            userid_=std::make_shared<int64_t>((int64_t)pJson["userid"].asInt64());
        }
    }
    if(pJson.isMember("vote"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["vote"].isNull())
        {
            vote_=std::make_shared<std::string>(pJson["vote"].asString());
        }
    }
}

const int64_t &Votes::getValueOfVoteid() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(voteid_)
        return *voteid_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Votes::getVoteid() const noexcept
{
    return voteid_;
}
void Votes::setVoteid(const int64_t &pVoteid) noexcept
{
    voteid_ = std::make_shared<int64_t>(pVoteid);
    dirtyFlag_[0] = true;
}
const typename Votes::PrimaryKeyType & Votes::getPrimaryKey() const
{
    assert(voteid_);
    return *voteid_;
}

const int64_t &Votes::getValueOfCommentid() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(commentid_)
        return *commentid_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Votes::getCommentid() const noexcept
{
    return commentid_;
}
void Votes::setCommentid(const int64_t &pCommentid) noexcept
{
    commentid_ = std::make_shared<int64_t>(pCommentid);
    dirtyFlag_[1] = true;
}

const int64_t &Votes::getValueOfUserid() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(userid_)
        return *userid_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Votes::getUserid() const noexcept
{
    return userid_;
}
void Votes::setUserid(const int64_t &pUserid) noexcept
{
    userid_ = std::make_shared<int64_t>(pUserid);
    dirtyFlag_[2] = true;
}

const std::string &Votes::getValueOfVote() const noexcept
{
    const static std::string defaultValue = std::string();
    if(vote_)
        return *vote_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Votes::getVote() const noexcept
{
    return vote_;
}
void Votes::setVote(const std::string &pVote) noexcept
{
    vote_ = std::make_shared<std::string>(pVote);
    dirtyFlag_[3] = true;
}
void Votes::setVote(std::string &&pVote) noexcept
{
    vote_ = std::make_shared<std::string>(std::move(pVote));
    dirtyFlag_[3] = true;
}

void Votes::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Votes::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "commentid",
        "userid",
        "vote"
    };
    return inCols;
}

void Votes::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCommentid())
        {
            binder << getValueOfCommentid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUserid())
        {
            binder << getValueOfUserid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getVote())
        {
            binder << getValueOfVote();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Votes::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    return ret;
}

void Votes::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCommentid())
        {
            binder << getValueOfCommentid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUserid())
        {
            binder << getValueOfUserid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getVote())
        {
            binder << getValueOfVote();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Votes::toJson() const
{
    Json::Value ret;
    if(getVoteid())
    {
        ret["voteid"]=(Json::Int64)getValueOfVoteid();
    }
    else
    {
        ret["voteid"]=Json::Value();
    }
    if(getCommentid())
    {
        ret["commentid"]=(Json::Int64)getValueOfCommentid();
    }
    else
    {
        ret["commentid"]=Json::Value();
    }
    if(getUserid())
    {
        ret["userid"]=(Json::Int64)getValueOfUserid();
    }
    else
    {
        ret["userid"]=Json::Value();
    }
    if(getVote())
    {
        ret["vote"]=getValueOfVote();
    }
    else
    {
        ret["vote"]=Json::Value();
    }
    return ret;
}

Json::Value Votes::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 4)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getVoteid())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfVoteid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCommentid())
            {
                ret[pMasqueradingVector[1]]=(Json::Int64)getValueOfCommentid();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getUserid())
            {
                ret[pMasqueradingVector[2]]=(Json::Int64)getValueOfUserid();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getVote())
            {
                ret[pMasqueradingVector[3]]=getValueOfVote();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getVoteid())
    {
        ret["voteid"]=(Json::Int64)getValueOfVoteid();
    }
    else
    {
        ret["voteid"]=Json::Value();
    }
    if(getCommentid())
    {
        ret["commentid"]=(Json::Int64)getValueOfCommentid();
    }
    else
    {
        ret["commentid"]=Json::Value();
    }
    if(getUserid())
    {
        ret["userid"]=(Json::Int64)getValueOfUserid();
    }
    else
    {
        ret["userid"]=Json::Value();
    }
    if(getVote())
    {
        ret["vote"]=getValueOfVote();
    }
    else
    {
        ret["vote"]=Json::Value();
    }
    return ret;
}

bool Votes::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("voteid"))
    {
        if(!validJsonOfField(0, "voteid", pJson["voteid"], err, true))
            return false;
    }
    if(pJson.isMember("commentid"))
    {
        if(!validJsonOfField(1, "commentid", pJson["commentid"], err, true))
            return false;
    }
    else
    {
        err="The commentid column cannot be null";
        return false;
    }
    if(pJson.isMember("userid"))
    {
        if(!validJsonOfField(2, "userid", pJson["userid"], err, true))
            return false;
    }
    else
    {
        err="The userid column cannot be null";
        return false;
    }
    if(pJson.isMember("vote"))
    {
        if(!validJsonOfField(3, "vote", pJson["vote"], err, true))
            return false;
    }
    else
    {
        err="The vote column cannot be null";
        return false;
    }
    return true;
}
bool Votes::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Votes::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("voteid"))
    {
        if(!validJsonOfField(0, "voteid", pJson["voteid"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("commentid"))
    {
        if(!validJsonOfField(1, "commentid", pJson["commentid"], err, false))
            return false;
    }
    if(pJson.isMember("userid"))
    {
        if(!validJsonOfField(2, "userid", pJson["userid"], err, false))
            return false;
    }
    if(pJson.isMember("vote"))
    {
        if(!validJsonOfField(3, "vote", pJson["vote"], err, false))
            return false;
    }
    return true;
}
bool Votes::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Votes::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson,
                             std::string &err,
                             bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
