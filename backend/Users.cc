/**
 *
 *  Users.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Users.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::stend;

const std::string Users::Cols::_userid = "userid";
const std::string Users::Cols::_email = "email";
const std::string Users::Cols::_emailnonce = "emailnonce";
const std::string Users::Cols::_emailsearchable = "emailsearchable";
const std::string Users::Cols::_lastlogin = "lastlogin";
const std::string Users::Cols::_username = "username";
const std::string Users::Cols::_passwordhash = "passwordhash";
const std::string Users::Cols::_passwordsalt = "passwordsalt";
const std::string Users::Cols::_gender = "gender";
const std::string Users::Cols::_profilepicture = "profilepicture";
const std::string Users::Cols::_profilepictureurl = "profilepictureurl";
const std::string Users::Cols::_birthyear = "birthyear";
const std::string Users::Cols::_permanentlocation = "permanentlocation";
const std::string Users::Cols::_permanentlocationnonce = "permanentlocationnonce";
const std::string Users::Cols::_displayname = "displayname";
const std::string Users::Cols::_incorrect_password_attempts = "incorrect_password_attempts";
const std::string Users::Cols::_incorrect_password_attempt_date = "incorrect_password_attempt_date";
const std::string Users::primaryKeyName = "userid";
const bool Users::hasPrimaryKey = true;
const std::string Users::tableName = "users";

const std::vector<typename Users::MetaData> Users::metaData_={
{"userid","int64_t","bigint",8,1,1,1},
{"email","std::vector<char>","bytea",0,0,0,1},
{"emailnonce","std::vector<char>","bytea",0,0,0,1},
{"emailsearchable","std::vector<char>","bytea",0,0,0,1},
{"lastlogin","::trantor::Date","date",0,0,0,0},
{"username","std::string","text",0,0,0,1},
{"passwordhash","std::vector<char>","bytea",0,0,0,1},
{"passwordsalt","std::vector<char>","bytea",0,0,0,1},
{"gender","std::string","bit",0,0,0,0},
{"profilepicture","std::vector<char>","bytea",0,0,0,0},
{"profilepictureurl","std::string","text",0,0,0,0},
{"birthyear","int32_t","integer",4,0,0,0},
{"permanentlocation","std::vector<char>","bytea",0,0,0,0},
{"permanentlocationnonce","std::vector<char>","bytea",0,0,0,0},
{"displayname","std::string","text",0,0,0,0},
{"incorrect_password_attempts","int32_t","integer",4,0,0,0},
{"incorrect_password_attempt_date","::trantor::Date","date",0,0,0,0}
};
const std::string &Users::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Users::Users(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["userid"].isNull())
        {
            userid_=std::make_shared<int64_t>(r["userid"].as<int64_t>());
        }
        if(!r["email"].isNull())
        {
            auto str = r["email"].as<string_view>();
            if(str.length()>=2&&
                str[0]=='\\'&&str[1]=='x')
            {
                email_=std::make_shared<std::vector<char>>(drogon::utils::hexToBinaryVector(str.data()+2,str.length()-2));
            }
        }
        if(!r["emailnonce"].isNull())
        {
            auto str = r["emailnonce"].as<string_view>();
            if(str.length()>=2&&
                str[0]=='\\'&&str[1]=='x')
            {
                emailnonce_=std::make_shared<std::vector<char>>(drogon::utils::hexToBinaryVector(str.data()+2,str.length()-2));
            }
        }
        if(!r["emailsearchable"].isNull())
        {
            auto str = r["emailsearchable"].as<string_view>();
            if(str.length()>=2&&
                str[0]=='\\'&&str[1]=='x')
            {
                emailsearchable_=std::make_shared<std::vector<char>>(drogon::utils::hexToBinaryVector(str.data()+2,str.length()-2));
            }
        }
        if(!r["lastlogin"].isNull())
        {
            auto daysStr = r["lastlogin"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            lastlogin_=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["username"].isNull())
        {
            username_=std::make_shared<std::string>(r["username"].as<std::string>());
        }
        if(!r["passwordhash"].isNull())
        {
            auto str = r["passwordhash"].as<string_view>();
            if(str.length()>=2&&
                str[0]=='\\'&&str[1]=='x')
            {
                passwordhash_=std::make_shared<std::vector<char>>(drogon::utils::hexToBinaryVector(str.data()+2,str.length()-2));
            }
        }
        if(!r["passwordsalt"].isNull())
        {
            auto str = r["passwordsalt"].as<string_view>();
            if(str.length()>=2&&
                str[0]=='\\'&&str[1]=='x')
            {
                passwordsalt_=std::make_shared<std::vector<char>>(drogon::utils::hexToBinaryVector(str.data()+2,str.length()-2));
            }
        }
        if(!r["gender"].isNull())
        {
            gender_=std::make_shared<std::string>(r["gender"].as<std::string>());
        }
        if(!r["profilepicture"].isNull())
        {
            auto str = r["profilepicture"].as<string_view>();
            if(str.length()>=2&&
                str[0]=='\\'&&str[1]=='x')
            {
                profilepicture_=std::make_shared<std::vector<char>>(drogon::utils::hexToBinaryVector(str.data()+2,str.length()-2));
            }
        }
        if(!r["profilepictureurl"].isNull())
        {
            profilepictureurl_=std::make_shared<std::string>(r["profilepictureurl"].as<std::string>());
        }
        if(!r["birthyear"].isNull())
        {
            birthyear_=std::make_shared<int32_t>(r["birthyear"].as<int32_t>());
        }
        if(!r["permanentlocation"].isNull())
        {
            auto str = r["permanentlocation"].as<string_view>();
            if(str.length()>=2&&
                str[0]=='\\'&&str[1]=='x')
            {
                permanentlocation_=std::make_shared<std::vector<char>>(drogon::utils::hexToBinaryVector(str.data()+2,str.length()-2));
            }
        }
        if(!r["permanentlocationnonce"].isNull())
        {
            auto str = r["permanentlocationnonce"].as<string_view>();
            if(str.length()>=2&&
                str[0]=='\\'&&str[1]=='x')
            {
                permanentlocationnonce_=std::make_shared<std::vector<char>>(drogon::utils::hexToBinaryVector(str.data()+2,str.length()-2));
            }
        }
        if(!r["displayname"].isNull())
        {
            displayname_=std::make_shared<std::string>(r["displayname"].as<std::string>());
        }
        if(!r["incorrect_password_attempts"].isNull())
        {
            incorrectPasswordAttempts_=std::make_shared<int32_t>(r["incorrect_password_attempts"].as<int32_t>());
        }
        if(!r["incorrect_password_attempt_date"].isNull())
        {
            auto daysStr = r["incorrect_password_attempt_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            incorrectPasswordAttemptDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 17 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            userid_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            auto str = r[index].as<string_view>();
            if(str.length()>=2&&
                str[0]=='\\'&&str[1]=='x')
            {
                email_=std::make_shared<std::vector<char>>(drogon::utils::hexToBinaryVector(str.data()+2,str.length()-2));
            }
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto str = r[index].as<string_view>();
            if(str.length()>=2&&
                str[0]=='\\'&&str[1]=='x')
            {
                emailnonce_=std::make_shared<std::vector<char>>(drogon::utils::hexToBinaryVector(str.data()+2,str.length()-2));
            }
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            auto str = r[index].as<string_view>();
            if(str.length()>=2&&
                str[0]=='\\'&&str[1]=='x')
            {
                emailsearchable_=std::make_shared<std::vector<char>>(drogon::utils::hexToBinaryVector(str.data()+2,str.length()-2));
            }
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            lastlogin_=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            username_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            auto str = r[index].as<string_view>();
            if(str.length()>=2&&
                str[0]=='\\'&&str[1]=='x')
            {
                passwordhash_=std::make_shared<std::vector<char>>(drogon::utils::hexToBinaryVector(str.data()+2,str.length()-2));
            }
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            auto str = r[index].as<string_view>();
            if(str.length()>=2&&
                str[0]=='\\'&&str[1]=='x')
            {
                passwordsalt_=std::make_shared<std::vector<char>>(drogon::utils::hexToBinaryVector(str.data()+2,str.length()-2));
            }
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            gender_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            auto str = r[index].as<string_view>();
            if(str.length()>=2&&
                str[0]=='\\'&&str[1]=='x')
            {
                profilepicture_=std::make_shared<std::vector<char>>(drogon::utils::hexToBinaryVector(str.data()+2,str.length()-2));
            }
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            profilepictureurl_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            birthyear_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            auto str = r[index].as<string_view>();
            if(str.length()>=2&&
                str[0]=='\\'&&str[1]=='x')
            {
                permanentlocation_=std::make_shared<std::vector<char>>(drogon::utils::hexToBinaryVector(str.data()+2,str.length()-2));
            }
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            auto str = r[index].as<string_view>();
            if(str.length()>=2&&
                str[0]=='\\'&&str[1]=='x')
            {
                permanentlocationnonce_=std::make_shared<std::vector<char>>(drogon::utils::hexToBinaryVector(str.data()+2,str.length()-2));
            }
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            displayname_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            incorrectPasswordAttempts_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            incorrectPasswordAttemptDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }

}

Users::Users(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 17)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userid_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto str = pJson[pMasqueradingVector[1]].asString();
            email_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto str = pJson[pMasqueradingVector[2]].asString();
            emailnonce_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto str = pJson[pMasqueradingVector[3]].asString();
            emailsearchable_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            lastlogin_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            username_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto str = pJson[pMasqueradingVector[6]].asString();
            passwordhash_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto str = pJson[pMasqueradingVector[7]].asString();
            passwordsalt_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            gender_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            auto str = pJson[pMasqueradingVector[9]].asString();
            profilepicture_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            profilepictureurl_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            birthyear_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[11]].asInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            auto str = pJson[pMasqueradingVector[12]].asString();
            permanentlocation_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            auto str = pJson[pMasqueradingVector[13]].asString();
            permanentlocationnonce_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            displayname_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            incorrectPasswordAttempts_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[15]].asInt64());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[16]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            incorrectPasswordAttemptDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

Users::Users(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("userid"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["userid"].isNull())
        {
            userid_=std::make_shared<int64_t>((int64_t)pJson["userid"].asInt64());
        }
    }
    if(pJson.isMember("email"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["email"].isNull())
        {
            auto str = pJson["email"].asString();
            email_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(pJson.isMember("emailnonce"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["emailnonce"].isNull())
        {
            auto str = pJson["emailnonce"].asString();
            emailnonce_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(pJson.isMember("emailsearchable"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["emailsearchable"].isNull())
        {
            auto str = pJson["emailsearchable"].asString();
            emailsearchable_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(pJson.isMember("lastlogin"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["lastlogin"].isNull())
        {
            auto daysStr = pJson["lastlogin"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            lastlogin_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("username"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["username"].isNull())
        {
            username_=std::make_shared<std::string>(pJson["username"].asString());
        }
    }
    if(pJson.isMember("passwordhash"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["passwordhash"].isNull())
        {
            auto str = pJson["passwordhash"].asString();
            passwordhash_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(pJson.isMember("passwordsalt"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["passwordsalt"].isNull())
        {
            auto str = pJson["passwordsalt"].asString();
            passwordsalt_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(pJson.isMember("gender"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["gender"].isNull())
        {
            gender_=std::make_shared<std::string>(pJson["gender"].asString());
        }
    }
    if(pJson.isMember("profilepicture"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["profilepicture"].isNull())
        {
            auto str = pJson["profilepicture"].asString();
            profilepicture_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(pJson.isMember("profilepictureurl"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["profilepictureurl"].isNull())
        {
            profilepictureurl_=std::make_shared<std::string>(pJson["profilepictureurl"].asString());
        }
    }
    if(pJson.isMember("birthyear"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["birthyear"].isNull())
        {
            birthyear_=std::make_shared<int32_t>((int32_t)pJson["birthyear"].asInt64());
        }
    }
    if(pJson.isMember("permanentlocation"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["permanentlocation"].isNull())
        {
            auto str = pJson["permanentlocation"].asString();
            permanentlocation_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(pJson.isMember("permanentlocationnonce"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["permanentlocationnonce"].isNull())
        {
            auto str = pJson["permanentlocationnonce"].asString();
            permanentlocationnonce_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(pJson.isMember("displayname"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["displayname"].isNull())
        {
            displayname_=std::make_shared<std::string>(pJson["displayname"].asString());
        }
    }
    if(pJson.isMember("incorrect_password_attempts"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["incorrect_password_attempts"].isNull())
        {
            incorrectPasswordAttempts_=std::make_shared<int32_t>((int32_t)pJson["incorrect_password_attempts"].asInt64());
        }
    }
    if(pJson.isMember("incorrect_password_attempt_date"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["incorrect_password_attempt_date"].isNull())
        {
            auto daysStr = pJson["incorrect_password_attempt_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            incorrectPasswordAttemptDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

void Users::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 17)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userid_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto str = pJson[pMasqueradingVector[1]].asString();
            email_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto str = pJson[pMasqueradingVector[2]].asString();
            emailnonce_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto str = pJson[pMasqueradingVector[3]].asString();
            emailsearchable_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            lastlogin_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            username_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto str = pJson[pMasqueradingVector[6]].asString();
            passwordhash_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto str = pJson[pMasqueradingVector[7]].asString();
            passwordsalt_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            gender_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            auto str = pJson[pMasqueradingVector[9]].asString();
            profilepicture_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            profilepictureurl_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            birthyear_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[11]].asInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            auto str = pJson[pMasqueradingVector[12]].asString();
            permanentlocation_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            auto str = pJson[pMasqueradingVector[13]].asString();
            permanentlocationnonce_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            displayname_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            incorrectPasswordAttempts_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[15]].asInt64());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[16]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            incorrectPasswordAttemptDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

void Users::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("userid"))
    {
        if(!pJson["userid"].isNull())
        {
            userid_=std::make_shared<int64_t>((int64_t)pJson["userid"].asInt64());
        }
    }
    if(pJson.isMember("email"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["email"].isNull())
        {
            auto str = pJson["email"].asString();
            email_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(pJson.isMember("emailnonce"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["emailnonce"].isNull())
        {
            auto str = pJson["emailnonce"].asString();
            emailnonce_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(pJson.isMember("emailsearchable"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["emailsearchable"].isNull())
        {
            auto str = pJson["emailsearchable"].asString();
            emailsearchable_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(pJson.isMember("lastlogin"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["lastlogin"].isNull())
        {
            auto daysStr = pJson["lastlogin"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            lastlogin_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("username"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["username"].isNull())
        {
            username_=std::make_shared<std::string>(pJson["username"].asString());
        }
    }
    if(pJson.isMember("passwordhash"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["passwordhash"].isNull())
        {
            auto str = pJson["passwordhash"].asString();
            passwordhash_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(pJson.isMember("passwordsalt"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["passwordsalt"].isNull())
        {
            auto str = pJson["passwordsalt"].asString();
            passwordsalt_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(pJson.isMember("gender"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["gender"].isNull())
        {
            gender_=std::make_shared<std::string>(pJson["gender"].asString());
        }
    }
    if(pJson.isMember("profilepicture"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["profilepicture"].isNull())
        {
            auto str = pJson["profilepicture"].asString();
            profilepicture_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(pJson.isMember("profilepictureurl"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["profilepictureurl"].isNull())
        {
            profilepictureurl_=std::make_shared<std::string>(pJson["profilepictureurl"].asString());
        }
    }
    if(pJson.isMember("birthyear"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["birthyear"].isNull())
        {
            birthyear_=std::make_shared<int32_t>((int32_t)pJson["birthyear"].asInt64());
        }
    }
    if(pJson.isMember("permanentlocation"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["permanentlocation"].isNull())
        {
            auto str = pJson["permanentlocation"].asString();
            permanentlocation_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(pJson.isMember("permanentlocationnonce"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["permanentlocationnonce"].isNull())
        {
            auto str = pJson["permanentlocationnonce"].asString();
            permanentlocationnonce_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(pJson.isMember("displayname"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["displayname"].isNull())
        {
            displayname_=std::make_shared<std::string>(pJson["displayname"].asString());
        }
    }
    if(pJson.isMember("incorrect_password_attempts"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["incorrect_password_attempts"].isNull())
        {
            incorrectPasswordAttempts_=std::make_shared<int32_t>((int32_t)pJson["incorrect_password_attempts"].asInt64());
        }
    }
    if(pJson.isMember("incorrect_password_attempt_date"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["incorrect_password_attempt_date"].isNull())
        {
            auto daysStr = pJson["incorrect_password_attempt_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            incorrectPasswordAttemptDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

const int64_t &Users::getValueOfUserid() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(userid_)
        return *userid_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Users::getUserid() const noexcept
{
    return userid_;
}
void Users::setUserid(const int64_t &pUserid) noexcept
{
    userid_ = std::make_shared<int64_t>(pUserid);
    dirtyFlag_[0] = true;
}
const typename Users::PrimaryKeyType & Users::getPrimaryKey() const
{
    assert(userid_);
    return *userid_;
}

const std::vector<char> &Users::getValueOfEmail() const noexcept
{
    const static std::vector<char> defaultValue = std::vector<char>();
    if(email_)
        return *email_;
    return defaultValue;
}
std::string Users::getValueOfEmailAsString() const noexcept
{
    const static std::string defaultValue = std::string();
    if(email_)
        return std::string(email_->data(),email_->size());
    return defaultValue;
}
const std::shared_ptr<std::vector<char>> &Users::getEmail() const noexcept
{
    return email_;
}
void Users::setEmail(const std::vector<char> &pEmail) noexcept
{
    email_ = std::make_shared<std::vector<char>>(pEmail);
    dirtyFlag_[1] = true;
}
void Users::setEmail(const std::string &pEmail) noexcept
{
    email_ = std::make_shared<std::vector<char>>(pEmail.c_str(),pEmail.c_str()+pEmail.length());
    dirtyFlag_[1] = true;
}

const std::vector<char> &Users::getValueOfEmailnonce() const noexcept
{
    const static std::vector<char> defaultValue = std::vector<char>();
    if(emailnonce_)
        return *emailnonce_;
    return defaultValue;
}
std::string Users::getValueOfEmailnonceAsString() const noexcept
{
    const static std::string defaultValue = std::string();
    if(emailnonce_)
        return std::string(emailnonce_->data(),emailnonce_->size());
    return defaultValue;
}
const std::shared_ptr<std::vector<char>> &Users::getEmailnonce() const noexcept
{
    return emailnonce_;
}
void Users::setEmailnonce(const std::vector<char> &pEmailnonce) noexcept
{
    emailnonce_ = std::make_shared<std::vector<char>>(pEmailnonce);
    dirtyFlag_[2] = true;
}
void Users::setEmailnonce(const std::string &pEmailnonce) noexcept
{
    emailnonce_ = std::make_shared<std::vector<char>>(pEmailnonce.c_str(),pEmailnonce.c_str()+pEmailnonce.length());
    dirtyFlag_[2] = true;
}

const std::vector<char> &Users::getValueOfEmailsearchable() const noexcept
{
    const static std::vector<char> defaultValue = std::vector<char>();
    if(emailsearchable_)
        return *emailsearchable_;
    return defaultValue;
}
std::string Users::getValueOfEmailsearchableAsString() const noexcept
{
    const static std::string defaultValue = std::string();
    if(emailsearchable_)
        return std::string(emailsearchable_->data(),emailsearchable_->size());
    return defaultValue;
}
const std::shared_ptr<std::vector<char>> &Users::getEmailsearchable() const noexcept
{
    return emailsearchable_;
}
void Users::setEmailsearchable(const std::vector<char> &pEmailsearchable) noexcept
{
    emailsearchable_ = std::make_shared<std::vector<char>>(pEmailsearchable);
    dirtyFlag_[3] = true;
}
void Users::setEmailsearchable(const std::string &pEmailsearchable) noexcept
{
    emailsearchable_ = std::make_shared<std::vector<char>>(pEmailsearchable.c_str(),pEmailsearchable.c_str()+pEmailsearchable.length());
    dirtyFlag_[3] = true;
}

const ::trantor::Date &Users::getValueOfLastlogin() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(lastlogin_)
        return *lastlogin_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Users::getLastlogin() const noexcept
{
    return lastlogin_;
}
void Users::setLastlogin(const ::trantor::Date &pLastlogin) noexcept
{
    lastlogin_ = std::make_shared<::trantor::Date>(pLastlogin.roundDay());
    dirtyFlag_[4] = true;
}
void Users::setLastloginToNull() noexcept
{
    lastlogin_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Users::getValueOfUsername() const noexcept
{
    const static std::string defaultValue = std::string();
    if(username_)
        return *username_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getUsername() const noexcept
{
    return username_;
}
void Users::setUsername(const std::string &pUsername) noexcept
{
    username_ = std::make_shared<std::string>(pUsername);
    dirtyFlag_[5] = true;
}
void Users::setUsername(std::string &&pUsername) noexcept
{
    username_ = std::make_shared<std::string>(std::move(pUsername));
    dirtyFlag_[5] = true;
}

const std::vector<char> &Users::getValueOfPasswordhash() const noexcept
{
    const static std::vector<char> defaultValue = std::vector<char>();
    if(passwordhash_)
        return *passwordhash_;
    return defaultValue;
}
std::string Users::getValueOfPasswordhashAsString() const noexcept
{
    const static std::string defaultValue = std::string();
    if(passwordhash_)
        return std::string(passwordhash_->data(),passwordhash_->size());
    return defaultValue;
}
const std::shared_ptr<std::vector<char>> &Users::getPasswordhash() const noexcept
{
    return passwordhash_;
}
void Users::setPasswordhash(const std::vector<char> &pPasswordhash) noexcept
{
    passwordhash_ = std::make_shared<std::vector<char>>(pPasswordhash);
    dirtyFlag_[6] = true;
}
void Users::setPasswordhash(const std::string &pPasswordhash) noexcept
{
    passwordhash_ = std::make_shared<std::vector<char>>(pPasswordhash.c_str(),pPasswordhash.c_str()+pPasswordhash.length());
    dirtyFlag_[6] = true;
}

const std::vector<char> &Users::getValueOfPasswordsalt() const noexcept
{
    const static std::vector<char> defaultValue = std::vector<char>();
    if(passwordsalt_)
        return *passwordsalt_;
    return defaultValue;
}
std::string Users::getValueOfPasswordsaltAsString() const noexcept
{
    const static std::string defaultValue = std::string();
    if(passwordsalt_)
        return std::string(passwordsalt_->data(),passwordsalt_->size());
    return defaultValue;
}
const std::shared_ptr<std::vector<char>> &Users::getPasswordsalt() const noexcept
{
    return passwordsalt_;
}
void Users::setPasswordsalt(const std::vector<char> &pPasswordsalt) noexcept
{
    passwordsalt_ = std::make_shared<std::vector<char>>(pPasswordsalt);
    dirtyFlag_[7] = true;
}
void Users::setPasswordsalt(const std::string &pPasswordsalt) noexcept
{
    passwordsalt_ = std::make_shared<std::vector<char>>(pPasswordsalt.c_str(),pPasswordsalt.c_str()+pPasswordsalt.length());
    dirtyFlag_[7] = true;
}

const std::string &Users::getValueOfGender() const noexcept
{
    const static std::string defaultValue = std::string();
    if(gender_)
        return *gender_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getGender() const noexcept
{
    return gender_;
}
void Users::setGender(const std::string &pGender) noexcept
{
    gender_ = std::make_shared<std::string>(pGender);
    dirtyFlag_[8] = true;
}
void Users::setGender(std::string &&pGender) noexcept
{
    gender_ = std::make_shared<std::string>(std::move(pGender));
    dirtyFlag_[8] = true;
}
void Users::setGenderToNull() noexcept
{
    gender_.reset();
    dirtyFlag_[8] = true;
}

const std::vector<char> &Users::getValueOfProfilepicture() const noexcept
{
    const static std::vector<char> defaultValue = std::vector<char>();
    if(profilepicture_)
        return *profilepicture_;
    return defaultValue;
}
std::string Users::getValueOfProfilepictureAsString() const noexcept
{
    const static std::string defaultValue = std::string();
    if(profilepicture_)
        return std::string(profilepicture_->data(),profilepicture_->size());
    return defaultValue;
}
const std::shared_ptr<std::vector<char>> &Users::getProfilepicture() const noexcept
{
    return profilepicture_;
}
void Users::setProfilepicture(const std::vector<char> &pProfilepicture) noexcept
{
    profilepicture_ = std::make_shared<std::vector<char>>(pProfilepicture);
    dirtyFlag_[9] = true;
}
void Users::setProfilepicture(const std::string &pProfilepicture) noexcept
{
    profilepicture_ = std::make_shared<std::vector<char>>(pProfilepicture.c_str(),pProfilepicture.c_str()+pProfilepicture.length());
    dirtyFlag_[9] = true;
}
void Users::setProfilepictureToNull() noexcept
{
    profilepicture_.reset();
    dirtyFlag_[9] = true;
}

const std::string &Users::getValueOfProfilepictureurl() const noexcept
{
    const static std::string defaultValue = std::string();
    if(profilepictureurl_)
        return *profilepictureurl_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getProfilepictureurl() const noexcept
{
    return profilepictureurl_;
}
void Users::setProfilepictureurl(const std::string &pProfilepictureurl) noexcept
{
    profilepictureurl_ = std::make_shared<std::string>(pProfilepictureurl);
    dirtyFlag_[10] = true;
}
void Users::setProfilepictureurl(std::string &&pProfilepictureurl) noexcept
{
    profilepictureurl_ = std::make_shared<std::string>(std::move(pProfilepictureurl));
    dirtyFlag_[10] = true;
}
void Users::setProfilepictureurlToNull() noexcept
{
    profilepictureurl_.reset();
    dirtyFlag_[10] = true;
}

const int32_t &Users::getValueOfBirthyear() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(birthyear_)
        return *birthyear_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Users::getBirthyear() const noexcept
{
    return birthyear_;
}
void Users::setBirthyear(const int32_t &pBirthyear) noexcept
{
    birthyear_ = std::make_shared<int32_t>(pBirthyear);
    dirtyFlag_[11] = true;
}
void Users::setBirthyearToNull() noexcept
{
    birthyear_.reset();
    dirtyFlag_[11] = true;
}

const std::vector<char> &Users::getValueOfPermanentlocation() const noexcept
{
    const static std::vector<char> defaultValue = std::vector<char>();
    if(permanentlocation_)
        return *permanentlocation_;
    return defaultValue;
}
std::string Users::getValueOfPermanentlocationAsString() const noexcept
{
    const static std::string defaultValue = std::string();
    if(permanentlocation_)
        return std::string(permanentlocation_->data(),permanentlocation_->size());
    return defaultValue;
}
const std::shared_ptr<std::vector<char>> &Users::getPermanentlocation() const noexcept
{
    return permanentlocation_;
}
void Users::setPermanentlocation(const std::vector<char> &pPermanentlocation) noexcept
{
    permanentlocation_ = std::make_shared<std::vector<char>>(pPermanentlocation);
    dirtyFlag_[12] = true;
}
void Users::setPermanentlocation(const std::string &pPermanentlocation) noexcept
{
    permanentlocation_ = std::make_shared<std::vector<char>>(pPermanentlocation.c_str(),pPermanentlocation.c_str()+pPermanentlocation.length());
    dirtyFlag_[12] = true;
}
void Users::setPermanentlocationToNull() noexcept
{
    permanentlocation_.reset();
    dirtyFlag_[12] = true;
}

const std::vector<char> &Users::getValueOfPermanentlocationnonce() const noexcept
{
    const static std::vector<char> defaultValue = std::vector<char>();
    if(permanentlocationnonce_)
        return *permanentlocationnonce_;
    return defaultValue;
}
std::string Users::getValueOfPermanentlocationnonceAsString() const noexcept
{
    const static std::string defaultValue = std::string();
    if(permanentlocationnonce_)
        return std::string(permanentlocationnonce_->data(),permanentlocationnonce_->size());
    return defaultValue;
}
const std::shared_ptr<std::vector<char>> &Users::getPermanentlocationnonce() const noexcept
{
    return permanentlocationnonce_;
}
void Users::setPermanentlocationnonce(const std::vector<char> &pPermanentlocationnonce) noexcept
{
    permanentlocationnonce_ = std::make_shared<std::vector<char>>(pPermanentlocationnonce);
    dirtyFlag_[13] = true;
}
void Users::setPermanentlocationnonce(const std::string &pPermanentlocationnonce) noexcept
{
    permanentlocationnonce_ = std::make_shared<std::vector<char>>(pPermanentlocationnonce.c_str(),pPermanentlocationnonce.c_str()+pPermanentlocationnonce.length());
    dirtyFlag_[13] = true;
}
void Users::setPermanentlocationnonceToNull() noexcept
{
    permanentlocationnonce_.reset();
    dirtyFlag_[13] = true;
}

const std::string &Users::getValueOfDisplayname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(displayname_)
        return *displayname_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getDisplayname() const noexcept
{
    return displayname_;
}
void Users::setDisplayname(const std::string &pDisplayname) noexcept
{
    displayname_ = std::make_shared<std::string>(pDisplayname);
    dirtyFlag_[14] = true;
}
void Users::setDisplayname(std::string &&pDisplayname) noexcept
{
    displayname_ = std::make_shared<std::string>(std::move(pDisplayname));
    dirtyFlag_[14] = true;
}
void Users::setDisplaynameToNull() noexcept
{
    displayname_.reset();
    dirtyFlag_[14] = true;
}

const int32_t &Users::getValueOfIncorrectPasswordAttempts() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(incorrectPasswordAttempts_)
        return *incorrectPasswordAttempts_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Users::getIncorrectPasswordAttempts() const noexcept
{
    return incorrectPasswordAttempts_;
}
void Users::setIncorrectPasswordAttempts(const int32_t &pIncorrectPasswordAttempts) noexcept
{
    incorrectPasswordAttempts_ = std::make_shared<int32_t>(pIncorrectPasswordAttempts);
    dirtyFlag_[15] = true;
}
void Users::setIncorrectPasswordAttemptsToNull() noexcept
{
    incorrectPasswordAttempts_.reset();
    dirtyFlag_[15] = true;
}

const ::trantor::Date &Users::getValueOfIncorrectPasswordAttemptDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(incorrectPasswordAttemptDate_)
        return *incorrectPasswordAttemptDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Users::getIncorrectPasswordAttemptDate() const noexcept
{
    return incorrectPasswordAttemptDate_;
}
void Users::setIncorrectPasswordAttemptDate(const ::trantor::Date &pIncorrectPasswordAttemptDate) noexcept
{
    incorrectPasswordAttemptDate_ = std::make_shared<::trantor::Date>(pIncorrectPasswordAttemptDate.roundDay());
    dirtyFlag_[16] = true;
}
void Users::setIncorrectPasswordAttemptDateToNull() noexcept
{
    incorrectPasswordAttemptDate_.reset();
    dirtyFlag_[16] = true;
}

void Users::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Users::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "email",
        "emailnonce",
        "emailsearchable",
        "lastlogin",
        "username",
        "passwordhash",
        "passwordsalt",
        "gender",
        "profilepicture",
        "profilepictureurl",
        "birthyear",
        "permanentlocation",
        "permanentlocationnonce",
        "displayname",
        "incorrect_password_attempts",
        "incorrect_password_attempt_date"
    };
    return inCols;
}

void Users::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getEmailnonce())
        {
            binder << getValueOfEmailnonce();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getEmailsearchable())
        {
            binder << getValueOfEmailsearchable();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getLastlogin())
        {
            binder << getValueOfLastlogin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getUsername())
        {
            binder << getValueOfUsername();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getPasswordhash())
        {
            binder << getValueOfPasswordhash();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getPasswordsalt())
        {
            binder << getValueOfPasswordsalt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getGender())
        {
            binder << getValueOfGender();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getProfilepicture())
        {
            binder << getValueOfProfilepicture();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getProfilepictureurl())
        {
            binder << getValueOfProfilepictureurl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getBirthyear())
        {
            binder << getValueOfBirthyear();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getPermanentlocation())
        {
            binder << getValueOfPermanentlocation();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getPermanentlocationnonce())
        {
            binder << getValueOfPermanentlocationnonce();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getDisplayname())
        {
            binder << getValueOfDisplayname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getIncorrectPasswordAttempts())
        {
            binder << getValueOfIncorrectPasswordAttempts();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getIncorrectPasswordAttemptDate())
        {
            binder << getValueOfIncorrectPasswordAttemptDate();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Users::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    return ret;
}

void Users::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getEmailnonce())
        {
            binder << getValueOfEmailnonce();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getEmailsearchable())
        {
            binder << getValueOfEmailsearchable();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getLastlogin())
        {
            binder << getValueOfLastlogin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getUsername())
        {
            binder << getValueOfUsername();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getPasswordhash())
        {
            binder << getValueOfPasswordhash();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getPasswordsalt())
        {
            binder << getValueOfPasswordsalt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getGender())
        {
            binder << getValueOfGender();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getProfilepicture())
        {
            binder << getValueOfProfilepicture();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getProfilepictureurl())
        {
            binder << getValueOfProfilepictureurl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getBirthyear())
        {
            binder << getValueOfBirthyear();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getPermanentlocation())
        {
            binder << getValueOfPermanentlocation();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getPermanentlocationnonce())
        {
            binder << getValueOfPermanentlocationnonce();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getDisplayname())
        {
            binder << getValueOfDisplayname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getIncorrectPasswordAttempts())
        {
            binder << getValueOfIncorrectPasswordAttempts();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getIncorrectPasswordAttemptDate())
        {
            binder << getValueOfIncorrectPasswordAttemptDate();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Users::toJson() const
{
    Json::Value ret;
    if(getUserid())
    {
        ret["userid"]=(Json::Int64)getValueOfUserid();
    }
    else
    {
        ret["userid"]=Json::Value();
    }
    if(getEmail())
    {
        ret["email"]=drogon::utils::base64Encode((const unsigned char *)getEmail()->data(),getEmail()->size());
    }
    else
    {
        ret["email"]=Json::Value();
    }
    if(getEmailnonce())
    {
        ret["emailnonce"]=drogon::utils::base64Encode((const unsigned char *)getEmailnonce()->data(),getEmailnonce()->size());
    }
    else
    {
        ret["emailnonce"]=Json::Value();
    }
    if(getEmailsearchable())
    {
        ret["emailsearchable"]=drogon::utils::base64Encode((const unsigned char *)getEmailsearchable()->data(),getEmailsearchable()->size());
    }
    else
    {
        ret["emailsearchable"]=Json::Value();
    }
    if(getLastlogin())
    {
        ret["lastlogin"]=getLastlogin()->toDbStringLocal();
    }
    else
    {
        ret["lastlogin"]=Json::Value();
    }
    if(getUsername())
    {
        ret["username"]=getValueOfUsername();
    }
    else
    {
        ret["username"]=Json::Value();
    }
    if(getPasswordhash())
    {
        ret["passwordhash"]=drogon::utils::base64Encode((const unsigned char *)getPasswordhash()->data(),getPasswordhash()->size());
    }
    else
    {
        ret["passwordhash"]=Json::Value();
    }
    if(getPasswordsalt())
    {
        ret["passwordsalt"]=drogon::utils::base64Encode((const unsigned char *)getPasswordsalt()->data(),getPasswordsalt()->size());
    }
    else
    {
        ret["passwordsalt"]=Json::Value();
    }
    if(getGender())
    {
        ret["gender"]=getValueOfGender();
    }
    else
    {
        ret["gender"]=Json::Value();
    }
    if(getProfilepicture())
    {
        ret["profilepicture"]=drogon::utils::base64Encode((const unsigned char *)getProfilepicture()->data(),getProfilepicture()->size());
    }
    else
    {
        ret["profilepicture"]=Json::Value();
    }
    if(getProfilepictureurl())
    {
        ret["profilepictureurl"]=getValueOfProfilepictureurl();
    }
    else
    {
        ret["profilepictureurl"]=Json::Value();
    }
    if(getBirthyear())
    {
        ret["birthyear"]=getValueOfBirthyear();
    }
    else
    {
        ret["birthyear"]=Json::Value();
    }
    if(getPermanentlocation())
    {
        ret["permanentlocation"]=drogon::utils::base64Encode((const unsigned char *)getPermanentlocation()->data(),getPermanentlocation()->size());
    }
    else
    {
        ret["permanentlocation"]=Json::Value();
    }
    if(getPermanentlocationnonce())
    {
        ret["permanentlocationnonce"]=drogon::utils::base64Encode((const unsigned char *)getPermanentlocationnonce()->data(),getPermanentlocationnonce()->size());
    }
    else
    {
        ret["permanentlocationnonce"]=Json::Value();
    }
    if(getDisplayname())
    {
        ret["displayname"]=getValueOfDisplayname();
    }
    else
    {
        ret["displayname"]=Json::Value();
    }
    if(getIncorrectPasswordAttempts())
    {
        ret["incorrect_password_attempts"]=getValueOfIncorrectPasswordAttempts();
    }
    else
    {
        ret["incorrect_password_attempts"]=Json::Value();
    }
    if(getIncorrectPasswordAttemptDate())
    {
        ret["incorrect_password_attempt_date"]=getIncorrectPasswordAttemptDate()->toDbStringLocal();
    }
    else
    {
        ret["incorrect_password_attempt_date"]=Json::Value();
    }
    return ret;
}

Json::Value Users::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 17)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getUserid())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfUserid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getEmail())
            {
                ret[pMasqueradingVector[1]]=drogon::utils::base64Encode((const unsigned char *)getEmail()->data(),getEmail()->size());
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getEmailnonce())
            {
                ret[pMasqueradingVector[2]]=drogon::utils::base64Encode((const unsigned char *)getEmailnonce()->data(),getEmailnonce()->size());
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getEmailsearchable())
            {
                ret[pMasqueradingVector[3]]=drogon::utils::base64Encode((const unsigned char *)getEmailsearchable()->data(),getEmailsearchable()->size());
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getLastlogin())
            {
                ret[pMasqueradingVector[4]]=getLastlogin()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getUsername())
            {
                ret[pMasqueradingVector[5]]=getValueOfUsername();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getPasswordhash())
            {
                ret[pMasqueradingVector[6]]=drogon::utils::base64Encode((const unsigned char *)getPasswordhash()->data(),getPasswordhash()->size());
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getPasswordsalt())
            {
                ret[pMasqueradingVector[7]]=drogon::utils::base64Encode((const unsigned char *)getPasswordsalt()->data(),getPasswordsalt()->size());
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getGender())
            {
                ret[pMasqueradingVector[8]]=getValueOfGender();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getProfilepicture())
            {
                ret[pMasqueradingVector[9]]=drogon::utils::base64Encode((const unsigned char *)getProfilepicture()->data(),getProfilepicture()->size());
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getProfilepictureurl())
            {
                ret[pMasqueradingVector[10]]=getValueOfProfilepictureurl();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getBirthyear())
            {
                ret[pMasqueradingVector[11]]=getValueOfBirthyear();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getPermanentlocation())
            {
                ret[pMasqueradingVector[12]]=drogon::utils::base64Encode((const unsigned char *)getPermanentlocation()->data(),getPermanentlocation()->size());
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getPermanentlocationnonce())
            {
                ret[pMasqueradingVector[13]]=drogon::utils::base64Encode((const unsigned char *)getPermanentlocationnonce()->data(),getPermanentlocationnonce()->size());
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getDisplayname())
            {
                ret[pMasqueradingVector[14]]=getValueOfDisplayname();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getIncorrectPasswordAttempts())
            {
                ret[pMasqueradingVector[15]]=getValueOfIncorrectPasswordAttempts();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getIncorrectPasswordAttemptDate())
            {
                ret[pMasqueradingVector[16]]=getIncorrectPasswordAttemptDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getUserid())
    {
        ret["userid"]=(Json::Int64)getValueOfUserid();
    }
    else
    {
        ret["userid"]=Json::Value();
    }
    if(getEmail())
    {
        ret["email"]=drogon::utils::base64Encode((const unsigned char *)getEmail()->data(),getEmail()->size());
    }
    else
    {
        ret["email"]=Json::Value();
    }
    if(getEmailnonce())
    {
        ret["emailnonce"]=drogon::utils::base64Encode((const unsigned char *)getEmailnonce()->data(),getEmailnonce()->size());
    }
    else
    {
        ret["emailnonce"]=Json::Value();
    }
    if(getEmailsearchable())
    {
        ret["emailsearchable"]=drogon::utils::base64Encode((const unsigned char *)getEmailsearchable()->data(),getEmailsearchable()->size());
    }
    else
    {
        ret["emailsearchable"]=Json::Value();
    }
    if(getLastlogin())
    {
        ret["lastlogin"]=getLastlogin()->toDbStringLocal();
    }
    else
    {
        ret["lastlogin"]=Json::Value();
    }
    if(getUsername())
    {
        ret["username"]=getValueOfUsername();
    }
    else
    {
        ret["username"]=Json::Value();
    }
    if(getPasswordhash())
    {
        ret["passwordhash"]=drogon::utils::base64Encode((const unsigned char *)getPasswordhash()->data(),getPasswordhash()->size());
    }
    else
    {
        ret["passwordhash"]=Json::Value();
    }
    if(getPasswordsalt())
    {
        ret["passwordsalt"]=drogon::utils::base64Encode((const unsigned char *)getPasswordsalt()->data(),getPasswordsalt()->size());
    }
    else
    {
        ret["passwordsalt"]=Json::Value();
    }
    if(getGender())
    {
        ret["gender"]=getValueOfGender();
    }
    else
    {
        ret["gender"]=Json::Value();
    }
    if(getProfilepicture())
    {
        ret["profilepicture"]=drogon::utils::base64Encode((const unsigned char *)getProfilepicture()->data(),getProfilepicture()->size());
    }
    else
    {
        ret["profilepicture"]=Json::Value();
    }
    if(getProfilepictureurl())
    {
        ret["profilepictureurl"]=getValueOfProfilepictureurl();
    }
    else
    {
        ret["profilepictureurl"]=Json::Value();
    }
    if(getBirthyear())
    {
        ret["birthyear"]=getValueOfBirthyear();
    }
    else
    {
        ret["birthyear"]=Json::Value();
    }
    if(getPermanentlocation())
    {
        ret["permanentlocation"]=drogon::utils::base64Encode((const unsigned char *)getPermanentlocation()->data(),getPermanentlocation()->size());
    }
    else
    {
        ret["permanentlocation"]=Json::Value();
    }
    if(getPermanentlocationnonce())
    {
        ret["permanentlocationnonce"]=drogon::utils::base64Encode((const unsigned char *)getPermanentlocationnonce()->data(),getPermanentlocationnonce()->size());
    }
    else
    {
        ret["permanentlocationnonce"]=Json::Value();
    }
    if(getDisplayname())
    {
        ret["displayname"]=getValueOfDisplayname();
    }
    else
    {
        ret["displayname"]=Json::Value();
    }
    if(getIncorrectPasswordAttempts())
    {
        ret["incorrect_password_attempts"]=getValueOfIncorrectPasswordAttempts();
    }
    else
    {
        ret["incorrect_password_attempts"]=Json::Value();
    }
    if(getIncorrectPasswordAttemptDate())
    {
        ret["incorrect_password_attempt_date"]=getIncorrectPasswordAttemptDate()->toDbStringLocal();
    }
    else
    {
        ret["incorrect_password_attempt_date"]=Json::Value();
    }
    return ret;
}

bool Users::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("userid"))
    {
        if(!validJsonOfField(0, "userid", pJson["userid"], err, true))
            return false;
    }
    if(pJson.isMember("email"))
    {
        if(!validJsonOfField(1, "email", pJson["email"], err, true))
            return false;
    }
    else
    {
        err="The email column cannot be null";
        return false;
    }
    if(pJson.isMember("emailnonce"))
    {
        if(!validJsonOfField(2, "emailnonce", pJson["emailnonce"], err, true))
            return false;
    }
    else
    {
        err="The emailnonce column cannot be null";
        return false;
    }
    if(pJson.isMember("emailsearchable"))
    {
        if(!validJsonOfField(3, "emailsearchable", pJson["emailsearchable"], err, true))
            return false;
    }
    else
    {
        err="The emailsearchable column cannot be null";
        return false;
    }
    if(pJson.isMember("lastlogin"))
    {
        if(!validJsonOfField(4, "lastlogin", pJson["lastlogin"], err, true))
            return false;
    }
    if(pJson.isMember("username"))
    {
        if(!validJsonOfField(5, "username", pJson["username"], err, true))
            return false;
    }
    else
    {
        err="The username column cannot be null";
        return false;
    }
    if(pJson.isMember("passwordhash"))
    {
        if(!validJsonOfField(6, "passwordhash", pJson["passwordhash"], err, true))
            return false;
    }
    else
    {
        err="The passwordhash column cannot be null";
        return false;
    }
    if(pJson.isMember("passwordsalt"))
    {
        if(!validJsonOfField(7, "passwordsalt", pJson["passwordsalt"], err, true))
            return false;
    }
    else
    {
        err="The passwordsalt column cannot be null";
        return false;
    }
    if(pJson.isMember("gender"))
    {
        if(!validJsonOfField(8, "gender", pJson["gender"], err, true))
            return false;
    }
    if(pJson.isMember("profilepicture"))
    {
        if(!validJsonOfField(9, "profilepicture", pJson["profilepicture"], err, true))
            return false;
    }
    if(pJson.isMember("profilepictureurl"))
    {
        if(!validJsonOfField(10, "profilepictureurl", pJson["profilepictureurl"], err, true))
            return false;
    }
    if(pJson.isMember("birthyear"))
    {
        if(!validJsonOfField(11, "birthyear", pJson["birthyear"], err, true))
            return false;
    }
    if(pJson.isMember("permanentlocation"))
    {
        if(!validJsonOfField(12, "permanentlocation", pJson["permanentlocation"], err, true))
            return false;
    }
    if(pJson.isMember("permanentlocationnonce"))
    {
        if(!validJsonOfField(13, "permanentlocationnonce", pJson["permanentlocationnonce"], err, true))
            return false;
    }
    if(pJson.isMember("displayname"))
    {
        if(!validJsonOfField(14, "displayname", pJson["displayname"], err, true))
            return false;
    }
    if(pJson.isMember("incorrect_password_attempts"))
    {
        if(!validJsonOfField(15, "incorrect_password_attempts", pJson["incorrect_password_attempts"], err, true))
            return false;
    }
    if(pJson.isMember("incorrect_password_attempt_date"))
    {
        if(!validJsonOfField(16, "incorrect_password_attempt_date", pJson["incorrect_password_attempt_date"], err, true))
            return false;
    }
    return true;
}
bool Users::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 17)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[15].empty())
      {
          if(pJson.isMember(pMasqueradingVector[15]))
          {
              if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[16].empty())
      {
          if(pJson.isMember(pMasqueradingVector[16]))
          {
              if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Users::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("userid"))
    {
        if(!validJsonOfField(0, "userid", pJson["userid"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("email"))
    {
        if(!validJsonOfField(1, "email", pJson["email"], err, false))
            return false;
    }
    if(pJson.isMember("emailnonce"))
    {
        if(!validJsonOfField(2, "emailnonce", pJson["emailnonce"], err, false))
            return false;
    }
    if(pJson.isMember("emailsearchable"))
    {
        if(!validJsonOfField(3, "emailsearchable", pJson["emailsearchable"], err, false))
            return false;
    }
    if(pJson.isMember("lastlogin"))
    {
        if(!validJsonOfField(4, "lastlogin", pJson["lastlogin"], err, false))
            return false;
    }
    if(pJson.isMember("username"))
    {
        if(!validJsonOfField(5, "username", pJson["username"], err, false))
            return false;
    }
    if(pJson.isMember("passwordhash"))
    {
        if(!validJsonOfField(6, "passwordhash", pJson["passwordhash"], err, false))
            return false;
    }
    if(pJson.isMember("passwordsalt"))
    {
        if(!validJsonOfField(7, "passwordsalt", pJson["passwordsalt"], err, false))
            return false;
    }
    if(pJson.isMember("gender"))
    {
        if(!validJsonOfField(8, "gender", pJson["gender"], err, false))
            return false;
    }
    if(pJson.isMember("profilepicture"))
    {
        if(!validJsonOfField(9, "profilepicture", pJson["profilepicture"], err, false))
            return false;
    }
    if(pJson.isMember("profilepictureurl"))
    {
        if(!validJsonOfField(10, "profilepictureurl", pJson["profilepictureurl"], err, false))
            return false;
    }
    if(pJson.isMember("birthyear"))
    {
        if(!validJsonOfField(11, "birthyear", pJson["birthyear"], err, false))
            return false;
    }
    if(pJson.isMember("permanentlocation"))
    {
        if(!validJsonOfField(12, "permanentlocation", pJson["permanentlocation"], err, false))
            return false;
    }
    if(pJson.isMember("permanentlocationnonce"))
    {
        if(!validJsonOfField(13, "permanentlocationnonce", pJson["permanentlocationnonce"], err, false))
            return false;
    }
    if(pJson.isMember("displayname"))
    {
        if(!validJsonOfField(14, "displayname", pJson["displayname"], err, false))
            return false;
    }
    if(pJson.isMember("incorrect_password_attempts"))
    {
        if(!validJsonOfField(15, "incorrect_password_attempts", pJson["incorrect_password_attempts"], err, false))
            return false;
    }
    if(pJson.isMember("incorrect_password_attempt_date"))
    {
        if(!validJsonOfField(16, "incorrect_password_attempt_date", pJson["incorrect_password_attempt_date"], err, false))
            return false;
    }
    return true;
}
bool Users::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 17)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
      if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
      {
          if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
              return false;
      }
      if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
      {
          if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Users::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson,
                             std::string &err,
                             bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
